classdef AnnotationPlot < csmu.PlotBuilder
   
   properties
      LineType
      Units = 'data'
      X
      Y
      SourceAxis
      TargetAxis
   end
   
   properties (Constant)
     ShadowClass = {...
        'matlab.graphics.shape.Line', ...
        'matlab.graphics.shape.Arrow', ...
        'matlab.graphics.shape.DoubleEndArrow', ...
        'matlab.graphics.shape.TextArrow', ...
        'matlab.graphics.shape.TextBox', ...
        'matlab.graphics.shape.Rectangle', ...
        'matlab.graphics.shape.Ellipse'}        
     ShadowClassTag = {...
        '', ...
        'Arrow', ...
        'DoubleArrow', ...
        'TextArrow', ...
        'TextBox', ...
        'Rectangle', ...
        'Ellipse'}
     ShadowClassExcludeList = {...
        {'Units', 'X', 'Y'}, {'Units', 'X', 'Y'}, {'Units', 'X', 'Y'}, ...
        {'Units', 'X', 'Y'}, {'Units', 'X', 'Y'}, {'Units', 'X', 'Y'}, ...
        {'Units', 'X', 'Y'}}
   end
   
   methods
      function plotGraphics(self, axisHandle)
         
         if strcmpi(self.Units, 'data')
            if isempty(self.TargetAxis)
               [fuX, fuY] = csmu.du2fu(axisHandle, self.X, self.Y);               
            else
               if isempty(self.SourceAxis)
                  self.SourceAxis = axisHandle;
               end
               [fuX, fuY] = deal(zeros(1, 2));
               [fuX(1), fuY(1)] = csmu.du2fu(self.SourceAxis, self.X(1), ...
                  self.Y(1));
               [fuX(2), fuY(2)] = csmu.du2fu(self.TargetAxis, self.X(2), ...
                  self.Y(2));
            end
            self.PlotHandle = annotation(axisHandle.Parent, ...
               self.LineType, fuX, fuY);
            self.PlotHandle.Units = 'normalized';
         else
            self.PlotHandle = annotation(axisHandle.Parent, self.LineType, ...
               self.X, self.Y);
            self.PlotHandle.Units = self.Units;
         end
         self.applyShadowClassProps();         
      end
   end
   
end
